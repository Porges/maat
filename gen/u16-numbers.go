// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package gen

import "math"

type Uint16Generator struct {
	shrinkTarget uint16
}

func (g Uint16Generator) shrink(v interface{}, send Shrinkee) ShrinkResult {
	value := v.(uint16)

	// very fast shrink:
	if value > 0 && value > g.shrinkTarget {
		logged := uint16(math.Log10(float64(value)))
		if logged != value {
			if send(GeneratedValue{logged, g.shrink}) == Stop {
				return Stopped
			}
		}
	}

	// fast shrink:
	halved := value / 2
	if halved != value && value > g.shrinkTarget {
		if send(GeneratedValue{halved, g.shrink}) == Stop {
			return Stopped
		}
	}

	// slow shrink:
	if value > g.shrinkTarget {
		if send(GeneratedValue{value - 1, g.shrink}) == Stop {
			return Stopped
		}
	} else if value < g.shrinkTarget {
		if send(GeneratedValue{value + 1, g.shrink}) == Stop {
			return Stopped
		}
	}

	return Exhausted
}
